generator client {
  provider = "prisma-client-js"
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model House {
  id                Int       @id @default(autoincrement())
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  name              String
  latitude          Float
  longitude         Float
  altitude          Float?
  floorCount        Int       @default(1)
  roomCount         Int       @default(1)
  stepCount         Int       @default(1)
  structure         Json?
  uid               String?   @unique
  /// [CheckTemplateList]
  checkListTemplate Json?
  teamId            Int?
  team              Team?     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  units             Unit[]
  versions          Version[]
}

model Unit {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  houseId   Int
  name      String
  type      String
  floor     Int      @default(1)
  index     Int
  comment   String?
  versionId Int
  /// [CheckList]
  checkList Json?
  images    Image[]
  house     House    @relation(fields: [houseId], references: [id], onDelete: Cascade)

  @@unique([houseId, type, floor, index], name: "unit_unique_key")
}

model Image {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  unitId    Int
  base64    String
  comment   String?
  altitude  Float?
  latitude  Float
  longitude Float
  unit      Unit     @relation(fields: [unitId], references: [id], onDelete: Cascade)
}

model Version {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  houseId   Int
  code      String
  text      String?
  reason    String?
  house     House    @relation(fields: [houseId], references: [id], onDelete: Cascade)
}

model Team {
  id     Int     @id @default(autoincrement())
  name   String
  houses House[]
  users  User[]
}

model User {
  id     Int    @id @unique @default(autoincrement())
  authId String @unique
  email  String
  teamId Int?
  team   Team?  @relation(fields: [teamId], references: [id], onDelete: Cascade)
}
