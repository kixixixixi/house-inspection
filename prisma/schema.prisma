// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model House {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  name       String
  latitude   Float
  longitude  Float
  altitude   Float?
  floorCount Int      @default(1)
  roomCount  Int      @default(1)
  stepCount  Int      @default(1)
  structure  Json?
  uid        String?  @unique
  teamId     Int?

  /// [CheckTemplateList]
  checkListTemplate Json?

  versions Version[]

  team  Team?  @relation(fields: [teamId], references: [id], onDelete: Cascade)
  units Unit[]
}

model Unit {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  houseId   Int
  name      String
  type      String
  floor     Int      @default(1)
  index     Int
  comment   String?
  versionId Int

  /// [CheckList]
  checkList Json?

  house  House   @relation(fields: [houseId], references: [id], onDelete: Cascade)
  images Image[]

  @@unique([houseId, type, floor, index], name: "unit_unique_key")
}

model Image {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  unitId    Int
  unit      Unit     @relation(fields: [unitId], references: [id], onDelete: Cascade)
  base64    String
  comment   String?
  latitude  Float
  longitude Float
  altitude  Float?
}

model Version {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  houseId Int
  house   House   @relation(fields: [houseId], references: [id], onDelete: Cascade)
  code    String
  text    String?
  reason  String?
}

model Team {
  id   Int    @id @default(autoincrement())
  name String

  users  User[]
  houses House[]
}

model User {
  id     Int    @id @default(autoincrement())
  authId String
  email  String
  teamId Int?
  team   Team?  @relation(fields: [teamId], references: [id], onDelete: Cascade)
}
